//  Copyright (c) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

#version 450
#extension GL_GOOGLE_include_directive : require

#include "shaderEnqueueSpirvIntrinsics.glsl.h"
#include "common.glsl.h"

#define TILE_SIZE 16
layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;

layout (set = 0, binding = 0, rgba8) uniform writeonly image2D outImage;

struct InputPayload
{
	uvec2 coord;		// tile or pixel coordinates
};

DeclareCoalescingAMDX();
DeclareBuiltInCoalescedInputCountAMDX(inputPayloadCount);
DeclareInputPayloadArrayAMD(InputPayload, in_payload, TILE_SIZE * TILE_SIZE);

void main()
{
	if (gl_LocalInvocationIndex < inputPayloadCount)
	{
		const ivec2 coord = ivec2(in_payload[gl_LocalInvocationIndex].coord);
		const vec2  uv    = vec2(coord % TILE_SIZE) / TILE_SIZE;

		// Aggregation creates a white-shaded tile.
		vec3 color = vec3(0.5 * (uv.x + uv.y));

		imageStore(outImage, coord, vec4(toSrgb(color), 1));
	}
}
